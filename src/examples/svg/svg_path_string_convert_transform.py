from typing import Callable, List, Tuple, ClassVar
import re


class AVsvgPath:
    SVG_CMDS: ClassVar[str] = "MmLlHhVvCcSsQqTtAaZz"
    SVG_ARGS: ClassVar[str] = r"[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?"
    # Commands (number of values : command-character):
    #     MoveTo            2: Mm
    #     LineTo            2: Ll   1: Hh(x)   1:Vv(y)
    #     CubicBezier:      6: Cc   4: Ss
    #     QuadraticBezier:  4: Qq   2: Tt
    #     ArcCurve:         7: Aa
    #     ClosePath:        0: Zz

    @staticmethod
    def beautify_commands(path_string: str,
                          round_func: Callable = None) -> str:
        org_commands = re.findall(
            f'[{AVsvgPath.SVG_CMDS}][^{AVsvgPath.SVG_CMDS}]*', path_string)
        ret_commands = []
        for command in org_commands:
            command_letter = command[0]
            args = re.findall(AVsvgPath.SVG_ARGS, command[1:])
            batch_size = len(args)
            if command_letter in "MmLlTt":
                batch_size = 2
            elif command_letter in "SsQq":
                batch_size = 4
            elif command_letter in "Cc":
                batch_size = 6
            elif command_letter in "HhVv":
                batch_size = 1
            elif command_letter in "Aa":
                batch_size = 7

            if batch_size == 0:  # e.g. for command "Z"
                ret_commands.append(command_letter)
            else:
                for i, arg in enumerate(args):
                    if not (i % batch_size):
                        ret_commands.append(command_letter)
                    if round_func:
                        ret_commands.append(f'{(round_func(float(arg))):g}')
                    else:
                        ret_commands.append(f'{(float(arg)):g}')

        ret_path_string = ' '.join(ret_commands)
        return ret_path_string

    @staticmethod
    def convert_relative_to_absolute(path_string: str) -> str:
        org_commands = re.findall(
            f'[{AVsvgPath.SVG_CMDS}][^{AVsvgPath.SVG_CMDS}]*', path_string)
        ret_commands = []
        first_point = None  # Store the first point of each path (absolute)
        # Keep track of the last (iterating) point (absolute)
        last_point = [0, 0]

        for command in org_commands:
            command_letter = command[0]
            args = re.findall(AVsvgPath.SVG_ARGS, command[1:])

            if command_letter.isupper():
                if command_letter in 'MLCSQTA':
                    last_point = [float(args[-2]), float(args[-1])]
                elif command_letter in 'H':
                    last_point[0] = float(args[-1])
                elif command_letter in 'V':
                    last_point[1] = float(args[-1])
            else:
                if command_letter in "mlt":
                    for i in range(0, len(args), 2):
                        args[i+0] = f'{(float(args[i+0]) + last_point[0]):g}'
                        args[i+1] = f'{(float(args[i+1]) + last_point[1]):g}'
                        last_point = [float(args[i+0]), float(args[i+1])]
                elif command_letter in "sq":
                    for i in range(0, len(args), 4):
                        args[i+0] = f'{(float(args[i+0]) + last_point[0]):g}'
                        args[i+1] = f'{(float(args[i+1]) + last_point[1]):g}'
                        args[i+2] = f'{(float(args[i+2]) + last_point[0]):g}'
                        args[i+3] = f'{(float(args[i+3]) + last_point[1]):g}'
                        last_point = [float(args[i+2]), float(args[i+3])]
                elif command_letter in "c":
                    for i in range(0, len(args), 6):
                        args[i+0] = f'{(float(args[i+0]) + last_point[0]):g}'
                        args[i+1] = f'{(float(args[i+1]) + last_point[1]):g}'
                        args[i+2] = f'{(float(args[i+2]) + last_point[0]):g}'
                        args[i+3] = f'{(float(args[i+3]) + last_point[1]):g}'
                        args[i+4] = f'{(float(args[i+4]) + last_point[0]):g}'
                        args[i+5] = f'{(float(args[i+5]) + last_point[1]):g}'
                        last_point = [float(args[i+4]), float(args[i+5])]
                elif command_letter in "h":
                    for i, arg in enumerate(args):
                        args[i] = f'{(float(arg) + last_point[0]):g}'
                        last_point[0] = float(args[i])
                elif command_letter in "v":
                    for i, arg in enumerate(args):
                        args[i] = f'{(float(arg) + last_point[1]):g}'
                        last_point[1] = float(args[i])
                elif command_letter in "a":
                    for i in range(0, len(args), 7):
                        args[i+5] = f'{(float(args[i+5]) + last_point[0]):g}'
                        args[i+6] = f'{(float(args[i+6]) + last_point[1]):g}'
                        last_point = [float(args[i+5]), float(args[i+6])]

            ret_commands.append(command_letter.upper() + ' '.join(args))

            if command_letter in 'Mm' and not first_point:
                first_point = [float(args[0]), float(args[1])]
            if command_letter in 'Zz':
                last_point = first_point
                first_point = None

        ret_path_string = ' '.join(ret_commands)
        return ret_path_string

    @staticmethod
    def transform_path_string(path_string: str,
                              affine_trafo: List[float]) -> str:
        # Affine transform (see also shapely - Affine Transformations)
        #     affine_transform = [a00, a01, a10, a11, b0, b1]
        #       | x' | = | a00 a01 b0 |   | x |
        #       | y' | = | a10 a11 b1 | * | y |
        #       | 1  | = |  0   0  1  |   | 1 |

        def transform(x_str: str, y_str: str) -> Tuple[str, str]:
            x_new = affine_trafo[0] * float(x_str) + \
                affine_trafo[1] * float(y_str) + \
                affine_trafo[4]
            y_new = affine_trafo[2] * float(x_str) + \
                affine_trafo[3] * float(y_str) + \
                affine_trafo[5]
            return f'{x_new:g}', f'{y_new:g}'

        org_commands = re.findall(
            f'[{AVsvgPath.SVG_CMDS}][^{AVsvgPath.SVG_CMDS}]*', path_string)
        ret_commands = []

        for command in org_commands:
            command_letter = command[0]
            args = re.findall(AVsvgPath.SVG_ARGS, command[1:])

            if command_letter in 'MLCSQT':  # (x,y) once or several times
                for i in range(0, len(args), 2):
                    (args[i+0], args[i+1]) = transform(args[i+0], args[i+1])
            elif command_letter in 'H':  # (x) once or several times
                for i, _ in enumerate(args):
                    (args[i], _) = transform(args[i], 1)
            elif command_letter in 'V':  # (y) once or several times
                for i, _ in enumerate(args):
                    (_, args[i]) = transform(1, args[i])
            elif command_letter in 'A':  # (rx ry angle flag flag x y)+
                for i in range(0, len(args), 7):
                    args[i+0] = f'{float(args[i+0])*affine_trafo[0]:g}'
                    args[i+1] = f'{float(args[i+1])*affine_trafo[3]:g}'
                    (args[i+5], args[i+6]) = transform(args[i+5], args[i+6])
            ret_commands.append(command_letter.upper() + ' '.join(args))

        ret_path_string = ' '.join(ret_commands)
        return ret_path_string

    @staticmethod
    def test_class():
        test_strings = [
            "M281.5 0L563 563H0z",
            "M276.5 444.707l-170.752 80.812 24.093-187.367L.218 200.731l185.642-34.987L276.5 0l90.64 165.744 185.642 34.987-129.623 137.421 24.093 187.367z",
            "M269 0l190.212 78.788L538 269l-78.788 190.212L269 538 78.788 459.212 0 269 78.788 78.788z",
            "M381.5 585.822L279.396 762.558l-.057-204.11-176.793 102.006L204.552 483.66l-204.11-.057L177.178 381.5.442 279.396l204.11-.057-102.006-176.793L279.34 204.552l.057-204.11L381.5 177.178 483.604.442l.057 204.11 176.793-102.006L558.448 279.34l204.11.057L585.822 381.5l176.736 102.104-204.11.057 102.006 176.793L483.66 558.448l-.057 204.11z",
            "M32 18.451l-16-12.42-16 12.42v-5.064l16-12.42 16 12.42zM28 18v12h-8v-8h-8v8h-8v-12l12-9z",
            "M15 0v0c8.284 0 15 5.435 15 12.139s-6.716 12.139-15 12.139c-0.796 0-1.576-0.051-2.339-0.147-3.222 3.209-6.943 3.785-10.661 3.869v-0.785c2.008-0.98 3.625-2.765 3.625-4.804 0-0.285-0.022-0.564-0.063-0.837-3.392-2.225-5.562-5.625-5.562-9.434 0-6.704 6.716-12.139 15-12.139zM31.125 27.209c0 1.748 1.135 3.278 2.875 4.118v0.673c-3.223-0.072-6.181-0.566-8.973-3.316-0.661 0.083-1.337 0.126-2.027 0.126-2.983 0-5.732-0.805-7.925-2.157 4.521-0.016 8.789-1.464 12.026-4.084 1.631-1.32 2.919-2.87 3.825-4.605 0.961-1.84 1.449-3.799 1.449-5.825 0-0.326-0.014-0.651-0.039-0.974 2.268 1.873 3.664 4.426 3.664 7.24 0 3.265-1.88 6.179-4.82 8.086-0.036 0.234-0.055 0.474-0.055 0.718z",
            "M12 0l-12 16h12l-8 16 28-20h-16l12-12z",
            "M31.604 4.203c-3.461-2.623-8.787-4.189-14.247-4.189-6.754 0-12.257 2.358-15.099 6.469-1.335 1.931-2.073 4.217-2.194 6.796-0.108 2.296 0.278 4.835 1.146 7.567 2.965-8.887 11.244-15.847 20.79-15.847 0 0-8.932 2.351-14.548 9.631-0.003 0.004-0.078 0.097-0.207 0.272-1.128 1.509-2.111 3.224-2.846 5.166-1.246 2.963-2.4 7.030-2.4 11.931h4c0 0-0.607-3.819 0.449-8.212 1.747 0.236 3.308 0.353 4.714 0.353 3.677 0 6.293-0.796 8.231-2.504 1.736-1.531 2.694-3.587 3.707-5.764 1.548-3.325 3.302-7.094 8.395-10.005 0.292-0.167 0.48-0.468 0.502-0.804s-0.126-0.659-0.394-0.862z",
            "M31 16l-15-15v9h-16v12h16v9z",
            "M 0 0 C 130,0 130,130 0,130",
            "M0 0c4.255 136.009 8.278 212.553 12.07 229.633 4.147 18.678 7.825 103.926 65.305 103.926 57.48 0 82.23-25.727 69.855-100.141s-17.414-105.914 41.024-105.914c58.437 0 35.827 89.276 30.43 107.129-15.67 51.827-30.43 154.945 34.535 163.484 64.965 8.54 73.97-46.797 75.738-86.5 1.717-38.571-18.478-164.61 35.828-164.61 56.871 0 70.925 63.998 51.457 116.333-41.035 110.316-19.335 193.898 63.137 193.898 58.195 0 88.983-73.722 92.363-221.168L580.578 0H0z",
            "M1.335-.013l13.688 32.028 27.425-21.472 9.566 33.49 29.9-17.865 5.293 34.426 31.902-13.977.937 34.818 33.403-9.868-3.434 34.66 34.376-5.604-7.751 33.957 34.808-1.251-11.947 32.717 34.69 3.121-15.952 30.963 34.025 7.444-19.707 28.719 32.824 11.65-23.151 26.022 31.105 15.672-26.23 22.916L276 332l-28.896 19.447 26.23 22.916-31.104 15.672 23.151 26.022-5.475 1.943H0V1.333z",
            "M2,2 L8,2 L2,5 L8,5 L2,8 L8,8",
            "M1,5 A 5 3 20 0 1 8 8",
            "M2,5 S2,-2 4,5 S7,8 8,4",
            "M140 20C73 20 20 74 20 140c0 135 136 170 228 303 88-132 229-173 229-303 0-66-54-120-120-120-48 0-90 28-109 69-19-41-60-69-108-69z",
            "M 8,223 c 0,0 143,3 185,-181 c 2,-11 -1,-20 1,-33 h 16 c 0,0 -3,17 1,30 c 21,68 -4,242 -204,196 L 8,223 z M 8,230 c 0,0 188,40 196,-160",
            "M12 0 l-12 16h12l-8 16 28-20h-16l12-12z",
            "M 10,110 l 12,112 q 11,111 22,222 z",
            "M10,10 L20,20 l10,10 H30 h20 V40 v10 C50,50 60,60 70,70 z",
            "M3.4E-34-2.2e56L23-34z",
            "M100 100",
            "M100 100 m50 50",
            "M100 100 L200 200",
            "M100 100 L200 200 100 150",
            "M100 100 l50 50",
            "M100 100 H300",
            "M100 100 h50",
            "M100 100 V100",
            "M100 100 v50",
            "M100 100 C100 200 200 300 300 400",
            "M100,100 c50,0 50,50 100,50",
            "M100 100 S200 100 300 0",
            "M100,100 s50,50 100,0",
            "M100 100 Q100 200 200 300",
            "M100 100 q50 50 100 0",
            "M100 100 T200 200",
            "M100 100 t50 -50",
            "M100 100 A50 50 0 0 0 150 150",
            "M100 100 a50 50 0 0 1 50 -50",
            "M100 100 L200 100 L150 150 Z",
            "M100 100 l50 -50 l-50 -50 z",
            "M100,100 L150,150 H200 V100 C250,50 250,150 300,100 S350,150 400,100 Q450,50 450,150 T500,100 A50,50 0 0,1 550,150 Z",
            "M100,100 l50,50 h50 v-50 c50,-50 50,50 100,0 s50,50 100,0 q50,-50 50,50 t50,-50 a50,50 0 0,1 50,-50 z",
            "M2 0a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2V2a2 2 0 0 0 -2 -2H2zm7.5 11h-4a0.5 0.5 0 0 1 -0.5 -0.5v-4a0.5 0.5 0 0 1 1 0v2.793l4.146 -4.147a0.5 0.5 0 0 1 0.708 0.708L6.707 10H9.5a0.5 0.5 0 0 1 0 1z",
            "M100 200 L150 250 H200 V100 C250 50 250 150 300 100 S350 150 400 100 Q450 50 450 150 T500 100 A50 50 0 0 1 550 150 Z",
        ]

        relative_strings = [
            "M281.5,0l281.5,563h-563z",
            "M276.5,444.707l-170.752,80.812l24.093,-187.367l-129.623,-137.421l185.642,-34.987l90.64,-165.744l90.64,165.744l185.642,34.987l-129.623,137.421l24.093,187.367z",
            "M269,0l190.212,78.788l78.788,190.212l-78.788,190.212l-190.212,78.788l-190.212,-78.788l-78.788,-190.212l78.788,-190.212z",
            "M381.5,585.822l-102.104,176.736l-0.057,-204.11l-176.793,102.006l102.006,-176.794l-204.11,-0.057l176.736,-102.103l-176.736,-102.104l204.11,-0.057l-102.006,-176.793l176.794,102.006l0.057,-204.11l102.103,176.736l102.104,-176.736l0.057,204.11l176.793,-102.006l-102.006,176.794l204.11,0.057l-176.736,102.103l176.736,102.104l-204.11,0.057l102.006,176.793l-176.794,-102.006l-0.057,204.11z",
            "M32,18.451l-16,-12.42l-16,12.42v-5.064l16,-12.42l16,12.42zm-4,-0.451v12h-8v-8h-8v8h-8v-12l12,-9z",
            "M15,0v0c8.284,0,15,5.435,15,12.139s-6.716,12.139,-15,12.139c-0.796,0,-1.576,-0.051,-2.339,-0.147c-3.222,3.209,-6.943,3.785,-10.661,3.869v-0.785c2.008,-0.98,3.625,-2.765,3.625,-4.804c0,-0.285,-0.022,-0.564,-0.063,-0.837c-3.392,-2.225,-5.562,-5.625,-5.562,-9.434c0,-6.704,6.716,-12.139,15,-12.139zm16.125,27.209c0,1.748,1.135,3.278,2.875,4.118v0.673c-3.223,-0.072,-6.181,-0.566,-8.973,-3.316c-0.661,0.083,-1.337,0.126,-2.027,0.126c-2.983,0,-5.732,-0.805,-7.925,-2.157c4.521,-0.016,8.789,-1.464,12.026,-4.084c1.631,-1.32,2.919,-2.87,3.825,-4.605c0.961,-1.84,1.449,-3.799,1.449,-5.825c0,-0.326,-0.014,-0.651,-0.039,-0.974c2.268,1.873,3.664,4.426,3.664,7.24c0,3.265,-1.88,6.179,-4.82,8.086c-0.036,0.234,-0.055,0.474,-0.055,0.718z",
            "M12,0l-12,16h12l-8,16l28,-20h-16l12,-12z",
            "M31.604,4.203c-3.461,-2.623,-8.787,-4.189,-14.247,-4.189c-6.754,0,-12.257,2.358,-15.099,6.469c-1.335,1.931,-2.073,4.217,-2.194,6.796c-0.108,2.296,0.278,4.835,1.146,7.567c2.965,-8.887,11.244,-15.847,20.79,-15.847c0,0,-8.932,2.351,-14.548,9.631c-0.003,0.004,-0.078,0.097,-0.207,0.272c-1.128,1.509,-2.111,3.224,-2.846,5.166c-1.246,2.963,-2.4,7.03,-2.4,11.931h4c0,0,-0.607,-3.819,0.449,-8.212c1.747,0.236,3.308,0.353,4.714,0.353c3.677,0,6.293,-0.796,8.231,-2.504c1.736,-1.531,2.694,-3.587,3.707,-5.764c1.548,-3.325,3.302,-7.094,8.395,-10.005c0.292,-0.167,0.48,-0.468,0.502,-0.804s-0.126,-0.659,-0.394,-0.862z",
            "M31,16l-15,-15v9h-16v12h16v9z",
            "M0,0c130,0,130,130,0,130",
            "M0,0c4.255,136.009,8.278,212.553,12.07,229.633c4.147,18.678,7.825,103.926,65.305,103.926c57.48,0,82.23,-25.727,69.855,-100.141s-17.414,-105.914,41.024,-105.914c58.437,0,35.827,89.276,30.43,107.129c-15.67,51.827,-30.43,154.945,34.535,163.484c64.965,8.54,73.97,-46.797,75.738,-86.5c1.717,-38.571,-18.478,-164.61,35.828,-164.61c56.871,0,70.925,63.998,51.457,116.333c-41.035,110.316,-19.335,193.898,63.137,193.898c58.195,0,88.983,-73.722,92.363,-221.168l8.836,-236.07h-580.578z",
            "M1.335,-0.013l13.688,32.028l27.425,-21.472l9.566,33.49l29.9,-17.865l5.293,34.426l31.902,-13.977l0.937,34.818l33.403,-9.868l-3.434,34.66l34.376,-5.604l-7.751,33.957l34.808,-1.251l-11.947,32.717l34.69,3.121l-15.952,30.963l34.025,7.444l-19.707,28.719l32.824,11.65l-23.151,26.022l31.105,15.672l-26.23,22.916l28.895,19.447l-28.896,19.447l26.23,22.916l-31.104,15.672l23.151,26.022l-5.475,1.943h-259.906v-416.667z",
            "M2,2l6,0l-6,3l6,0l-6,3l6,0",
            "M1,5a5,3,20,0,1,7,3",
            "M2,5s0,-7,2,0s3,3,4,-1",
            "M140,20c-67,0,-120,54,-120,120c0,135,136,170,228,303c88,-132,229,-173,229,-303c0,-66,-54,-120,-120,-120c-48,0,-90,28,-109,69c-19,-41,-60,-69,-108,-69z",
            "M8,223c0,0,143,3,185,-181c2,-11,-1,-20,1,-33h16c0,0,-3,17,1,30c21,68,-4,242,-204,196l1,-12zm0,7c0,0,188,40,196,-160",
            "M12,0l-12,16h12l-8,16l28,-20h-16l12,-12z",
            "M10,110l12,112q11,111,22,222z",
            "M10,10l10,10l10,10h0h20v10v10c0,0,10,10,20,20z",
            "M3.4e-34,-2.2e+56L23-34z",
            "M100,100",
            "M100,100m50,50",
            "M100,100l100,100",
            "M100,100l100,100l-100,-50",
            "M100,100l50,50",
            "M100,100h200",
            "M100,100h50",
            "M100,100v0",
            "M100,100v50",
            "M100,100c0,100,100,200,200,300",
            "M100,100c50,0,50,50,100,50",
            "M100,100s100,0,200,-100",
            "M100,100s50,50,100,0",
            "M100,100q0,100,100,200",
            "M100,100q50,50,100,0",
            "M100,100t100,100",
            "M100,100t50,-50",
            "M100,100a50,50,0,0,0,50,50",
            "M100,100a50,50,0,0,1,50,-50",
            "M100,100l100,0l-50,50z",
            "M100,100l50,-50l-50,-50z",
            "M100,100l50,50h50v-50c50,-50,50,50,100,0s50,50,100,0q50,-50,50,50t50,-50a50,50,0,0,1,50,50z",
            "M100,100l50,50h50v-50c50,-50,50,50,100,0s50,50,100,0q50,-50,50,50t50,-50a50,50,0,0,1,50,-50z",
            "M2,0a2,2,0,0,0,-2,2v12a2,2,0,0,0,2,2h12a2,2,0,0,0,2,-2v-12a2,2,0,0,0,-2,-2h-12zm7.5,11h-4a0.5,0.5,0,0,1,-0.5,-0.5v-4a0.5,0.5,0,0,1,1,0v2.793l4.146,-4.147a0.5,0.5,0,0,1,0.708,0.708l-4.147,4.146h2.793a0.5,0.5,0,0,1,0,1z",
            "M100,200l50,50h50v-150c50,-50,50,50,100,0s50,50,100,0q50,-50,50,50t50,-50a50,50,0,0,1,50,50z",
        ]

        absolute_strings = [
            "M281.5,0L563,563H0Z",
            "M276.5,444.707L105.74799999999999,525.519L129.84099999999998,338.15200000000004L0.218,200.731L185.85999999999999,165.744L276.5,0L367.14,165.744L552.7819999999999,200.731L423.15899999999993,338.152L447.25199999999995,525.519Z",
            "M269,0L459.212,78.788L538,269L459.212,459.212L269,538L78.788,459.212L0,269L78.788,78.788Z",
            "M381.5,585.822L279.396,762.558L279.339,558.448L102.54599999999999,660.454L204.552,483.66L0.44199999999997885,483.603L177.178,381.5L0.442,279.396L204.55200000000002,279.339L102.54600000000002,102.54599999999999L279.34,204.552L279.397,0.44199999999997885L381.5,177.178L483.604,0.442L483.661,204.55200000000002L660.454,102.54600000000002L558.448,279.34L762.558,279.397L585.822,381.5L762.558,483.604L558.448,483.661L660.454,660.454L483.66,558.448L483.603,762.558Z",
            "M32,18.451L16,6.031000000000001L0,18.451V13.387L16,0.9670000000000005L32,13.387ZM28,18V30H20V22H12V30H4V18L16,9Z",
            "M15,0V0C23.284,0,30,5.435,30,12.139S23.284,24.278,15,24.278C14.204,24.278,13.424,24.227,12.661,24.131C9.439,27.34,5.718,27.916,2,28V27.215C4.008,26.235,5.625,24.45,5.625,22.411C5.625,22.126,5.603,21.847,5.562,21.574C2.1700000000000004,19.349,0,15.949000000000002,0,12.140000000000002C0,5.436000000000003,6.716,0.0010000000000029985,15,0.0010000000000029985ZM31.125,27.209C31.125,28.957,32.26,30.487,34,31.326999999999998V32C30.777,31.928,27.819,31.434,25.027,28.684C24.366,28.767,23.69,28.810000000000002,23,28.810000000000002C20.017,28.810000000000002,17.268,28.005000000000003,15.075,26.653000000000002C19.596,26.637000000000004,23.863999999999997,25.189000000000004,27.101,22.569000000000003C28.732,21.249000000000002,30.02,19.699,30.926,17.964000000000002C31.886999999999997,16.124000000000002,32.375,14.165000000000003,32.375,12.139000000000003C32.375,11.813000000000002,32.361,11.488000000000003,32.336,11.165000000000003C34.604,13.038000000000002,36,15.591000000000003,36,18.405C36,21.67,34.12,24.584000000000003,31.18,26.491C31.144,26.725,31.125,26.965,31.125,27.209Z",
            "M12,0L0,16H12L4,32L32,12H16L28,0Z",
            "M31.604,4.203C28.143,1.58,22.817,0.014000000000000234,17.357,0.014000000000000234C10.603,0.014000000000000234,5.1,2.3720000000000003,2.257999999999999,6.4830000000000005C0.9229999999999992,8.414000000000001,0.18499999999999917,10.7,0.06399999999999917,13.279C-0.04400000000000083,15.575,0.3419999999999992,18.114,1.209999999999999,20.846C4.174999999999999,11.959,12.453999999999999,4.9990000000000006,22,4.9990000000000006C22,4.9990000000000006,13.068,7.3500000000000005,7.452,14.63C7.449,14.634,7.374,14.727,7.245,14.902000000000001C6.117,16.411,5.134,18.126,4.399,20.068C3.153,23.031000000000002,1.999,27.098000000000003,1.999,31.999000000000002H5.9990000000000006C5.9990000000000006,31.999000000000002,5.392,28.180000000000003,6.448,23.787000000000003C8.195,24.023000000000003,9.756,24.140000000000004,11.162,24.140000000000004C14.839,24.140000000000004,17.455000000000002,23.344000000000005,19.393,21.636000000000003C21.129,20.105000000000004,22.087,18.049000000000003,23.1,15.872000000000003C24.648000000000003,12.547000000000004,26.402,8.778000000000002,31.495,5.867000000000003C31.787000000000003,5.700000000000003,31.975,5.399000000000003,31.997,5.063000000000002S31.871,4.404000000000003,31.603,4.201000000000002Z",
            "M31,16L16,1V10H0V22H16V31Z",
            "M0,0C130,0,130,130,0,130",
            "M0,0C4.255,136.009,8.278,212.553,12.07,229.633C16.217,248.311,19.895,333.559,77.375,333.559C134.855,333.559,159.60500000000002,307.83200000000005,147.23000000000002,233.418S129.81600000000003,127.504,188.25400000000002,127.504C246.69100000000003,127.504,224.08100000000002,216.78,218.68400000000003,234.633C203.01400000000004,286.46000000000004,188.25400000000002,389.578,253.21900000000002,398.117C318.184,406.65700000000004,327.189,351.32000000000005,328.957,311.617C330.674,273.04600000000005,310.479,147.007,364.78499999999997,147.007C421.65599999999995,147.007,435.71,211.005,416.24199999999996,263.34000000000003C375.207,373.65600000000006,396.907,457.23800000000006,479.37899999999996,457.23800000000006C537.574,457.23800000000006,568.362,383.5160000000001,571.742,236.07000000000005L580.578,0H0Z",
            "M1.335,-0.013L15.023,32.015L42.448,10.543L52.014,44.033L81.914,26.168000000000003L87.20700000000001,60.59400000000001L119.10900000000001,46.617000000000004L120.046,81.435L153.449,71.56700000000001L150.01500000000001,106.227L184.39100000000002,100.623L176.64000000000001,134.58L211.448,133.329L199.501,166.046L234.191,169.167L218.239,200.13L252.264,207.57399999999998L232.55700000000002,236.29299999999998L265.38100000000003,247.94299999999998L242.23000000000002,273.965L273.33500000000004,289.637L247.10500000000005,312.553L276,332L247.10399999999998,351.447L273.334,374.363L242.23000000000002,390.035L265.38100000000003,416.057L259.906,418H0V1.333Z",
            "M2,2L8,2L2,5L8,5L2,8L8,8",
            "M1,5A5,3,20,0,1,8,8",
            "M2,5S2,-2,4,5S7,8,8,4",
            "M140,20C73,20,20,74,20,140C20,275,156,310,248,443C336,311,477,270,477,140C477,74,423,20,357,20C309,20,267,48,248,89C229,48,188,20,140,20Z",
            "M8,223C8,223,151,226,193,42C195,31,192,22,194,9H210C210,9,207,26,211,39C232,107,207,281,7,235L8,223ZM8,230C8,230,196,270,204,70",
            "M12,0L0,16H12L4,32L32,12H16L28,0Z",
            "M10,110L22,222Q33,333,44,444Z",
            "M10,10L20,20L30,30H30H50V40V50C50,50,60,60,70,70Z",
            "M3.4e-34,-2.2e+56L23,-34Z",
            "M100,100",
            "M100,100M150,150",
            "M100,100L200,200",
            "M100,100L200,200L100,150",
            "M100,100L150,150",
            "M100,100H300",
            "M100,100H150",
            "M100,100V100",
            "M100,100V150",
            "M100,100C100,200,200,300,300,400",
            "M100,100C150,100,150,150,200,150",
            "M100,100S200,100,300,0",
            "M100,100S150,150,200,100",
            "M100,100Q100,200,200,300",
            "M100,100Q150,150,200,100",
            "M100,100T200,200",
            "M100,100T150,50",
            "M100,100A50,50,0,0,0,150,150",
            "M100,100A50,50,0,0,1,150,50",
            "M100,100L200,100L150,150Z",
            "M100,100L150,50L100,0Z",
            "M100,100L150,150H200V100C250,50,250,150,300,100S350,150,400,100Q450,50,450,150T500,100A50,50,0,0,1,550,150Z",
            "M100,100L150,150H200V100C250,50,250,150,300,100S350,150,400,100Q450,50,450,150T500,100A50,50,0,0,1,550,50Z",
            "M2,0A2,2,0,0,0,0,2V14A2,2,0,0,0,2,16H14A2,2,0,0,0,16,14V2A2,2,0,0,0,14,0H2ZM9.5,11H5.5A0.5,0.5,0,0,1,5,10.5V6.5A0.5,0.5,0,0,1,6,6.5V9.293L10.146,5.145999999999999A0.5,0.5,0,0,1,10.854000000000001,5.853999999999999L6.707,10H9.5A0.5,0.5,0,0,1,9.5,11Z",
            "M100,200L150,250H200V100C250,50,250,150,300,100S350,150,400,100Q450,50,450,150T500,100A50,50,0,0,1,550,150Z",
        ]

        def test_helper_compare(output: str, expected: str,
                                round_precision: int = 8,
                                affine_trafo: List[float] = None) -> None:
            output_b = AVsvgPath.beautify_commands(
                output, lambda x: round(x, round_precision))
            expected_b = AVsvgPath.beautify_commands(
                expected, lambda x: round(x, round_precision))
            if output_b != expected_b:
                print("precision   :", round_precision)
                print("affine_trafo:", affine_trafo)
                print("output_b    :", output_b)
                print("expected_b  :", expected_b)
            assert output_b == expected_b

        def test_helper_convert_and_compare(input: str,
                                            expected: str) -> None:
            output = AVsvgPath.convert_relative_to_absolute(input)
            test_helper_compare(output, expected)

        def inverse_affine_transform(affine_trafo: List[float]
                                     ) -> List[float]:
            # Affine transform (see shapely - Affine Transformations)
            #     affine_transform = [a00, a01, a10, a11, b0, b1]
            #     x' = | a00 a01 b0 |   | x |
            #     y' = | a10 a11 b1 | * | y |
            #     1  = |  0   0  1  | * | 1 |
            a00 = affine_trafo[0]
            a01 = affine_trafo[1]
            a10 = affine_trafo[2]
            a11 = affine_trafo[3]
            b00 = affine_trafo[4]
            b10 = affine_trafo[5]
            denom = a00*a11 - a01*a10
            # ret = [a11/denom, -a01/denom, -a10/denom, a00/denom,
            #        (-a11*b00 + a01*b10)/denom,
            #        (a10*b00 - a00*b10)/denom]
            ret = [a11/denom, -a01/denom, -a10/denom, a00/denom,
                   (-a11*b00/denom + a01*b10/denom),
                   (a10*b00/denom - a00*b10/denom)]
            return ret

        def test_helper_transform_and_compare(input: str,
                                              affine_trafo: List[float],
                                              round_precision=1) -> None:
            intermed = AVsvgPath.transform_path_string(input, affine_trafo)
            inverse_trafo = inverse_affine_transform(affine_trafo)
            result = AVsvgPath.transform_path_string(intermed, inverse_trafo)
            test_helper_compare(input, result,
                                round_precision, affine_trafo)

        # do the convert-tests:
        for input_string, expected_string in zip(test_strings,
                                                 absolute_strings):
            test_helper_convert_and_compare(input_string, expected_string)
        for input_string, expected_string in zip(relative_strings,
                                                 absolute_strings):
            test_helper_convert_and_compare(input_string, expected_string)

        print("All convert tests passed!")

        # # do the transform-tests:
        affine_trafos = [(1, 0, 0, 1, -10, -20),
                         (1, 0, 0, 1, 10, 20),
                         (10, 0, 0, 1, 0, 0),
                         (1, 0, 0, 10, 0, 0),
                         (10, 0, 0, 10, 0, 0),
                         (10, 0, 0, 100, 20, 30),
                         (1, 0, 0, 0.1, -30, 0),
                         (10, 0, 0, 100, -30, -20)]
        for affine_trafo in affine_trafos:
            for test_string in absolute_strings:
                input_string = test_string
                # input_string = AVsvgPath.convert_relative_to_absolute(
                #     test_string)
                test_helper_transform_and_compare(input_string,
                                                  affine_trafo, 8)

        print("All transform tests passed!")


if __name__ == "__main__":
    AVsvgPath.test_class()
